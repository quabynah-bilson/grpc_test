// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: auth.proto

package ms_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthSvcClient is the client API for AuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSvcClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	CreateAccount(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AuthResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	CurrentAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSvcClient(cc grpc.ClientConnInterface) AuthSvcClient {
	return &authSvcClient{cc}
}

func (c *authSvcClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/test.AuthSvc/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) CreateAccount(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/test.AuthSvc/createAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/test.AuthSvc/updateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/test.AuthSvc/resetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) DeleteAccount(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/test.AuthSvc/deleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) CurrentAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/test.AuthSvc/currentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSvcServer is the server API for AuthSvc service.
// All implementations must embed UnimplementedAuthSvcServer
// for forward compatibility
type AuthSvcServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	CreateAccount(context.Context, *AuthRequest) (*AuthResponse, error)
	UpdateAccount(context.Context, *Account) (*AuthResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*AuthResponse, error)
	DeleteAccount(context.Context, *DeleteRequest) (*AuthResponse, error)
	CurrentAccount(context.Context, *EmptyRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthSvcServer()
}

// UnimplementedAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSvcServer struct {
}

func (UnimplementedAuthSvcServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthSvcServer) CreateAccount(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAuthSvcServer) UpdateAccount(context.Context, *Account) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAuthSvcServer) ResetPassword(context.Context, *ResetPasswordRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthSvcServer) DeleteAccount(context.Context, *DeleteRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAuthSvcServer) CurrentAccount(context.Context, *EmptyRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentAccount not implemented")
}
func (UnimplementedAuthSvcServer) mustEmbedUnimplementedAuthSvcServer() {}

// UnsafeAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSvcServer will
// result in compilation errors.
type UnsafeAuthSvcServer interface {
	mustEmbedUnimplementedAuthSvcServer()
}

func RegisterAuthSvcServer(s grpc.ServiceRegistrar, srv AuthSvcServer) {
	s.RegisterService(&AuthSvc_ServiceDesc, srv)
}

func _AuthSvc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.AuthSvc/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.AuthSvc/createAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).CreateAccount(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.AuthSvc/updateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.AuthSvc/resetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.AuthSvc/deleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).DeleteAccount(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_CurrentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).CurrentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.AuthSvc/currentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).CurrentAccount(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSvc_ServiceDesc is the grpc.ServiceDesc for AuthSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.AuthSvc",
	HandlerType: (*AuthSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _AuthSvc_Login_Handler,
		},
		{
			MethodName: "createAccount",
			Handler:    _AuthSvc_CreateAccount_Handler,
		},
		{
			MethodName: "updateAccount",
			Handler:    _AuthSvc_UpdateAccount_Handler,
		},
		{
			MethodName: "resetPassword",
			Handler:    _AuthSvc_ResetPassword_Handler,
		},
		{
			MethodName: "deleteAccount",
			Handler:    _AuthSvc_DeleteAccount_Handler,
		},
		{
			MethodName: "currentAccount",
			Handler:    _AuthSvc_CurrentAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
